{
  "hash": "5f7a7517fe40bc2b5f2708f73a907f77",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing a Billion Rows of Data\"\ncategories:\n  - Apache Arrow\n  - Visualizing\ndescription: \"A post about using apache arrow and efficiently visualizing in R\"\nauthor: \"Duncan Gates\"\ndate: 2023-03-02\nlightbox: true\n---\n\n\n## The NYC Taxi Data\n\nAlmost everyone has heard of the NYC taxi data at this point, in its current form it is about 24 columns and just under 1.7 billion rows. Each row represents a ride that occurred somewhere between 2009 and 2022. The important columns in this visualization are\n\n-   `pickup_longitude` (double): Longitude data for the pickup location\n-   `pickup_latitude` (double): Latitude data for the pickup location\n-   `dropoff_longitude` (double): Longitude data for the dropoff location\n-   `dropoff_latitude` (double): Latitude data for the dropoff location\n\n## Libraries\n\nThere are the libraries used for tranforming and visualizing.\n\n\n\n\n\n## Loading the Data\n\nThis transfers the nearly 70 gigabytes of taxi data to my computer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncopy_files(\n  from = s3_bucket(\"ursa-labs-taxi-data-v2\"),\n  to = \"~/Downloads/nyc-taxi\"\n)\n```\n:::\n\n\nThe datasets can subsequently be opened as such.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnyc_taxi_tiny <- arrow::open_dataset(\"~/Downloads/nyc-taxi-tiny/\")\nnyc_taxi <- arrow::open_dataset(\"~/Downloads/nyc-taxi/\")\n```\n:::\n\n\n## Checking it out\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(nyc_taxi_tiny)\n```\n:::\n\n\n## Plotting a million rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\nnyc_pickups <- nyc_taxi_tiny |>\n  select(pickup_longitude, pickup_latitude) |>\n  filter(\n    !is.na(pickup_longitude),\n    !is.na(pickup_latitude)\n  ) |>\n  collect()\ntoc()\n```\n:::\n\n\nLet's check out `nyc_pickups`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(nyc_pickups)\n```\n:::\n\n\nThis goes pretty quick now\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx0 <- -74.05 # minimum longitude to plot\ny0 <- 40.6   # minimum latitude to plot\nspan <- 0.3  # size of the lat/long window to plot\n\ntic()\npic <- ggplot(nyc_pickups) +\n  geom_point(\n    aes(pickup_longitude, pickup_latitude), \n    size = .2, \n    stroke = 0, \n    colour = \"#800020\"\n  ) +\n  scale_x_continuous(expand = c(0, 0)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  theme_void() +\n  coord_equal(\n    xlim = x0 + c(0, span), \n    ylim = y0 + c(0, span)\n  )\npic\ntoc()\n```\n:::\n\n\n## Plotting a billion rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\npixels <- 4000\npickup <- nyc_taxi |>\n  dplyr::filter(\n    !is.na(pickup_longitude),\n    !is.na(pickup_latitude),\n    pickup_longitude > x0,\n    pickup_longitude < x0 + span,\n    pickup_latitude > y0,\n    pickup_latitude < y0 + span\n  ) |>\n  dplyr::mutate(\n    unit_scaled_x = (pickup_longitude - x0) / span,\n    unit_scaled_y = (pickup_latitude - y0) / span,\n    x = as.integer(round(pixels * unit_scaled_x)), \n    y = as.integer(round(pixels * unit_scaled_y))\n  ) |>\n  dplyr::group_by(x, y) |>\n  dplyr::summarise(pickup = n()) |>\n  # dplyr::count(x, y, name = \"pickup\") |>\n  dplyr::collect()\ntoc()\n```\n:::\n\n\nMy laptop solves this in 27.51 seconds, again lets take a look at the resulting dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(pickup)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\ngrid <- expand_grid(x = 1:pixels, y = 1:pixels) |>\n  left_join(pickup, by = c(\"x\", \"y\")) |>\n  mutate(pickup = replace_na(pickup,  0))\ntoc()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\npickup_grid <- matrix(\n  data = grid$pickup,\n  nrow = pixels,\n  ncol = pixels\n)\ntoc()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrender_image <- function(mat, cols = c(\"white\", \"#800020\")) {\n  op <- par(mar = c(0, 0, 0, 0))\n  shades <- colorRampPalette(cols)\n  image(\n    z = log10(t(mat + 1)),\n    axes = FALSE,\n    asp = 1,\n    col = shades(1000),\n    useRaster = TRUE\n  )\n  par(op)\n}\n```\n:::\n\n\n## Rendering and saving\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\npng(file = here::here(\"imgs/taxi_viz_billion_rows.png\"),\n    bg = \"#27233a\",\n    width = 4000,\n    height = 4000)\nrender_image(pickup_grid, cols = c(\"#27233a\", \"white\", \"#F46036\"))\ndev.off()\ntoc()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(here::here(\"imgs/taxi_viz_billion_rows.png\"))\n```\n\n::: {.cell-output-display}\n![](../../imgs/taxi_viz_billion_rows.png){width=2000}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}